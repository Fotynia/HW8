// написати функцію summarize(num), 
// яка приймає на вхід число і повертає функцію,
// яка під час виклику додає це число до аргументу 
// і повертає результат. Якщо аргумент не передано, 
// то додається одиниця. Наприклад, якщо функція викликається з аргументом 5,
//  то функція, що повертається, повинна при виклику з аргументом 3 повернути 8 
//  (тому що 3 + 5 = 8) або 6, якщо аргумент не буде передано.

// function summarize(num) {
//       let call = function(arg) {
// let result = arg + num;
// if (arg === undefined) {
//     arg = 1;
//     return result;
// }
//  }
//   }
// let result = summarize();


// написати функцію counter(startValue, step), 
// яка приймає на вхід два параметри - стартове значення лічильника
//  і його крок. Функція повертає нову функцію, яка при кожному виклику 
//  збільшує лічильник на значення і повертає його поточне значення.
//  Лічильник повинен мати методи increment, decrement і reset, 
//  які збільшують або зменшують значення на step і 
//  скидають значення до стартового,  відповідно.

// function Counter(startValue, step) {
//     let count = 0;
//     this.up = function () {
//         return ++count;
//     };
//     this.down = function () {
//         return --count;
//     };
//     this.reset  = function () {
//         count = 0;
//     };
// }
// let count = new Counter();


// написати функцію sequence(fn, fn), 
// яка приймає на вхід дві або більше функції і
//  повертає нову функцію, яка викликає їх послідовно 
//  з результатом попереднього виклику. Результат останньої функції
//  має бути повернутий новою функцією. Кожна функція повинна мати 
//  доступ до результату попередньої функції через замикання.


// function sequence(fn, fn) {
//     let generate = (fn) => (fn) => fn(fn(fn));
//     return generate;
// }
// let generate = new sequence();


